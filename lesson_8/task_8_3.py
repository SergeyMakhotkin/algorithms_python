"""
DFS Depth_First_Search
Алгоритм обхода графа в глубину
(вариант с определением графа с помощью списка смежности)



3. Написать программу, которая обходит не взвешенный ориентированный граф без петель,
в котором все вершины связаны, по алгоритму поиска в глубину (Depth-First Search).
Примечания:
a. граф должен храниться в виде списка смежности;
b. генерация графа выполняется в отдельной функции, которая принимает на вход число вершин.
"""


#  пункт b задания неясен.
#  для генерации списка смежности недостаточно информации о количестве вершин,
#  в функцию также требуется передавать информацию об их связи. Возможно вводить с клавиатуры. При
# таком варианте не вижу сложности в заполнении списка из списков, заполняемых
# с клавиатуры (если не проверять граф на связность)

graph = [
    [1, 2, 3],
    [0, 5, 7],
    [0, 3, 4],
    [0, 2, 6],
    [2],
    [1, 8, 9],
    [3, 10],
    [1, 11],
    [5, 13, 15],
    [5, 10],
    [6, 9, 12, 14],
    [7, 15, 16],
    [10, 13],
    [8, 12, 17],
    [10, 18],
    [8, 11],
    [11, 20, 21],
    [13, 19, 20],
    [14],
    [17],
    [16, 17],
    [16],
    [21],
    [17, 24],
    [23],

]

is_visited = [False] * len(graph)  # для хранения информации о пройденных вершинах графа
result = []  # для удобства проверки функции


def dfs_adj_matrix(graph, vertex, visited_list, result):
    visited_list[vertex] = True
    print(vertex)
    result.append(vertex)  # для проверки
    for next_vertex in graph[vertex]:
        if not visited_list[next_vertex]:
            dfs_adj_matrix(graph, next_vertex, visited_list, result)


dfs_adj_matrix(graph, 0, is_visited, result)
print(sorted(result))
