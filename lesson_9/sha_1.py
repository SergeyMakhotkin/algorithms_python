def sha1(data):

    # инициализируются 5 переменных
    # переменные хранят 32 бита информации

    h0 = 0x67452301
    h1 = 0xEFCDAB89
    h2 = 0x98BADCFE
    h3 = 0x10325476
    h4 = 0xC3E2E1F0

    # запоминаем длинну исходной строки
    length = len(data)  # целое число длинной в 64 бита

    # дописываем 1 бит в конце
    data = (data << 1) + 1

    if len(data) % 512 > 448:
        #заподняем оставшуюся часть нулями
        data = data << 64

    # теперь длинна данных, деленная на 512 точно меньше 448

    data = data << (448 - len(data) % 512))
    # добавляем в конец нуливые биты так, чтобы остаток от деления на 512 был равен 448
    data = (data << 64) + length  # сдвигаем еще на 64 бита влево, дописываем справа значение length (длинной 64)
    # получили строку, в которой исходная строка, некоторое количество нулей справа
    # и длинна исходной строки (последние 64 бита), при этом длинна переменной data в битах будет нацело делиться на 512

    # далее производим хэширование в цикле. из переменной data извлекаем данные по 512 бит
    for part_512 in data:
        w  = []  # временный пустой список
        for i in range(16):
            w[i] = part_512[:32]
            part_512 = part_512[32:]  # сокращаем строку на 32 бита

        # в каждой ячейке массива w по 32 бита информации

        # далее, дополняем массив w из 16 слов по 32 до 80 слов по 32 бита
        for i in range(16, 80):
            w[i] = (w[i-3] ^ w[i-8] ^ w[i -14] ^ w[i - 16]) << 1

        # получили массив w из 80 элементов по 32 бита

        # инициализируем 5 переменных
        a = h0
        b = h1
        c = h2
        d = h3
        e = h4

        # далее основной цикл на 80 итераций (производим хэширование значений)
        for i in range(80):
            if 0 <= i <= 19:
                f = (b & c) | ((~b) & d)
                k = 0x5A827999

            elif 20 <= i <= 39:
                f = b ^ c ^ d
                k = 0x6ED9EBA1

            elif 40 <= i <= 59:
                f = (b & c) | (b & d) | (c & d)
                k = 0x8F1BBCDC

            elif 60 <= i <= 79:
                f = b ^ c ^ d
                k = 0xCA62C1D6


            temp = (a << 5) + f + e + k + w[i]

            # далее обмен значений меременных
            e = d
            d = c
            c = b << 30
            b = a
            a = temp

    # добавляем полученные значения к имеющимся
    h0 = h0 + a
    h1 = h1 + b
    h2 = h3 + c
    h3 = h4 + d
    h4 = h5 + e

    hash = h0 + h1 + h2 + h3 + h4
    return hash